{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.eaaebce4019573d26151.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head';\nimport styles from \"./index.module.css\";\nimport cx from \"classnames\";\nimport GenericModal from \"../components/GenericModal/GenericModal\";\nimport React, {useState} from \"react\";\nimport GenericField from \"../components/FormFields/GenericField\";\nimport axios from \"axios\";\nimport {baseUrl} from \"../util/url\";\nimport {routes} from \"../util/routes\";\n\nexport default function Home() {\n    const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);\n    const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n\n    return (\n        <>\n            {isRegisterModalOpen && <RegistrationModal setIsRegisterModalOpen={setIsRegisterModalOpen}/>}\n            {isLoginModalOpen && <LoginModal setIsLoginModalOpen={setIsLoginModalOpen}/>}\n            <div className={styles.container}>\n                <Head>\n                    <title>Stripomanija</title>\n                    <link rel=\"icon\" href=\"/favicon.ico\" />\n                </Head>\n                <div className={styles.upperSection}>\n                    <div>STRIPOMANIJA</div>\n                    <div className={styles.buttons}>\n                        <button type=\"button\" className={cx(\"btn btn-primary btn-lg\", styles.button)}\n                                onClick={()=>setIsRegisterModalOpen(true)}>Registracija</button>\n                        <button type=\"button\" className={cx(\"btn btn-primary btn-lg\", styles.space, styles.button)} onClick={()=>setIsLoginModalOpen(true)}>Login</button>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\n//ne radi jos\nconst RegistrationModal = ({setIsRegisterModalOpen})=>{\n    const [validationMsg, setValidationMsg] = useState(null);\n    const [isInvalid, setIsInvalid] = useState(false);\n\n    //role povuci sa apija!!\n    const [user, setUser] = useState({\n        role: \"ROLE_USER\",\n        ime: \"\",\n        prezime: \"\",\n        userName: \"\",\n        sifra: \"\",\n        email:\"\",\n        broj_losih_reviewa: 0,\n        ukupno_reviewa: 0\n    })\n\n    return(<GenericModal modalTitle={\"Registracija\"}\n                         closeModal={()=>setIsRegisterModalOpen(false)}\n                         showModal={()=>setIsRegisterModalOpen(true)}\n                         bottomText={\"Želimo Vam ugodno iskustvo na Stripomaniji!\"}\n                         btnText={\"Registruj me!\"}\n        >\n            <GenericField id={\"ime\"} name={\"ime\"} label={\"Ime\"} placeholder={\"Vaše ime\"} type={\"text\"} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <GenericField id={\"prezime\"} name={\"prezime\"} label={\"Prezime\"} placeholder={\"Vaše prezime\"} type={\"text\"} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <GenericField id={\"email\"} name={\"email\"} label={\"Email adresa\"} placeholder={\"Npr. jane@doe.com\"} type={\"email\"} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <GenericField id={\"usernameRegistracija\"} name={\"userName\"} label={\"Username\"} placeholder={\"Pomoću username-a se prijavljujete na Stripomaniju.\"} type={\"text\"} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <GenericField id={\"sifraRegistracija\"} name={\"sifra\"} label={\"Šifra\"} placeholder={\"Vaša šifra\"} type={\"password\"} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <div className=\"d-flex w-100 justify-content-end\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={()=>sendRequest(baseUrl + routes.register.path, user, setValidationMsg, setIsInvalid)}>Predaj</button>\n            </div>\n        </GenericModal>\n    );\n}\n\nconst LoginModal = ({setIsLoginModalOpen})=>{\n    const [validationMsg, setValidationMsg] = useState(null);\n    const [isInvalid, setIsInvalid] = useState(false);\n    const [user, setUser] = useState({\n        username:\"\",\n        password:\"\"\n    });\n\n    return(\n        <GenericModal\n            modalTitle={\"Prijava\"}\n            btnText={\"Predaj\"}\n            showModal={()=>setIsLoginModalOpen(true)}\n            closeModal={()=>setIsLoginModalOpen(false)}>\n            <GenericField id={\"usernameLogin\"} name={\"username\"} label={\"Username\"} placeholder={\"Vaš username\"} type={\"text\"} isInvalid={isInvalid} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <GenericField id={\"sifraLogin\"} name={\"password\"} label={\"Šifra\"} placeholder={\"Vaša šifra\"} type={\"password\"} isInvalid={isInvalid} validationMsg={validationMsg} onChange={(e)=>handleFieldChange(e, user, setUser)}/>\n            <div className=\"d-flex w-100 justify-content-end\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={()=>sendRequest(baseUrl + routes.authenticate.path, user, setValidationMsg, setIsInvalid)}>Predaj</button>\n            </div>\n        </GenericModal>\n    );\n}\n\nfunction handleFieldChange(e, user, setUser){\n    const {name, value} = e.target;\n    setUser(prevState=>({\n            ...prevState,\n            [name]: value\n        })\n    )\n}\n\nfunction sendRequest(url,reqBody, setValidationMsg, setIsInvalid){\n    axios.post(url, reqBody)\n        .then(response=>{\n            // save token to local storage\n            localStorage.setItem(\"jwt\", response.data.jwt);\n            setValidationMsg(null);\n            setIsInvalid(false);\n        }).catch(error=>{\n        console.log(error)\n        if(error.response.status === 400){\n            //validacija\n            setIsInvalid(true);\n            setValidationMsg(error.response.data.message);\n        }\n        console.log(error.response.data.message);\n    });\n}\n\nfunction routeIfAuthenticated(){\n    if(localStorage.getItem(jwt)){\n        \n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AALA;AAAA;AACA;AAesourceRoot":""}